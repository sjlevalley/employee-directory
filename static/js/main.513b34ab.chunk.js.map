{"version":3,"sources":["store/ui-slice.js","store/employee-slice.js","store/index.js","components/SearchBox.jsx","components/EmployeeDirectory.jsx","utils/utils.js","components/Jumbotron.jsx","App.js","store/employee-actions.js","index.js"],"names":["uiSlice","createSlice","name","initialState","cartModalVisible","cartIsVisible","notification","loading","category","reducers","toggle","state","showNotification","action","status","payload","title","message","setLoadingTrue","setLoadingFalse","setCategory","toggleCartModal","uiActions","actions","employeeSlice","employees","populateEmployeesArray","employeeActions","store","configureStore","reducer","ui","SearchBox","setSearchValue","Box","component","sx","ml","mt","width","noValidate","autoComplete","TextField","id","label","variant","onChange","e","target","value","EmployeeDirectory","useState","searchValue","filteredData","setFilteredData","employeeData","useSelector","results","columns","field","headerName","headerAlign","align","flex","renderCell","params","style","borderRadius","src","alt","employeesArray","map","employee","index","birthDate","moment","dob","date","format","push","image","picture","medium","firstName","first","lastName","last","phone","email","nationality","nat","renderRows","React","useEffect","rows","newArray","filter","employeeSearch","toLowerCase","includes","renderFiltered","height","DataGrid","rowHeight","length","pageSize","rowsPerPageOptions","boxShadow","m","p","border","borderColor","color","Jumbotron","className","App","dispatch","useDispatch","a","fetchData","fetch","response","ok","Error","json","data","path","element","to","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.513b34ab.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst uiSlice = createSlice({\n  name: 'ui', // Initial State\n  initialState: {\n    cartModalVisible: false,\n    cartIsVisible: false,\n    notification: null,\n    loading: false, category: \"\"\n  },\n\n  reducers: { // Reducers\n    toggle(state) {\n      state.cartIsVisible = !state.cartIsVisible;\n    },\n    showNotification(state, action) {\n      state.notification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message,\n      };\n    },\n    setLoadingTrue(state) {\n      state.loading = true\n    },\n    setLoadingFalse(state) {\n      state.loading = false\n    },\n    setCategory(state, action) {\n      state.category = action.payload\n    },\n    toggleCartModal(state) {\n      state.cartModalVisible = !state.cartModalVisible\n    }\n  },\n});\n\nexport const uiActions = uiSlice.actions;\n\nexport default uiSlice;\n","// Enables you to create a new slice\nimport { createSlice } from '@reduxjs/toolkit';\n\n\n// Initialize & create the new Slice of State, which ends up being an object with a name, initial state, and reducer functions which must be \"pure\"\nconst employeeSlice = createSlice({\n\n  // Set the name\n  name: 'employees',\n\n  // Set the intiial State\n  initialState: {\n    employees: []\n  },\n\n  // Add the reducer functions. Note: Below it appears that the state is being mutated (which is NOT cool with redux). However, this is not the case. Redux toolkit allows the syntax below and, behind the scenes, translates the syntax into the proper syntax that does NOT mutate the state. \n\n  // Also, remember that these reducers are \"pure\" and do not contain \"Async\" logic, these are ONLY for updating the state. All functions such as HTTP requests and other \"fetching\" or other async actions goes in the \"cart-actions.js\" file. This is where that asynchronous functionality lives and is called an Action Creator Thunk.\n  reducers: {\n    populateEmployeesArray(state, action) {\n      state.employees = action.payload;\n    }\n  },\n});\n\n// When using Redux toolkit, the Dispatch \"type\" is automatically created and linked up internally, which is why a switch statement with each conditional \"type\" (i.e. type: \"ADD_ITEM\") is not needed.\nexport const employeeActions = employeeSlice.actions;\n\nexport default employeeSlice;\n","// Import the Configure Store functionality from redux toolkit\nimport { configureStore } from '@reduxjs/toolkit';\n\n// Import your State \"Slices\" from each individual slice\nimport uiSlice from './ui-slice';\nimport employeeSlice from './employee-slice';\n\n\n// Set the store variable to export and call configureStore with the reducer being an object comprised of all your \n\nconst store = configureStore({ // different slice reducers\n  reducer: {\n    ui: uiSlice.reducer,\n    employees: employeeSlice.reducer\n  },\n});\n\n\n// Export the store\nexport default store;\n","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nfunction SearchBox({ setSearchValue }) {\r\n  return (\r\n    <Box\r\n      component=\"form\"\r\n      sx={{\r\n        \"& > :not(style)\": { ml: 4, mt: 2, width: \"50ch\" },\r\n      }}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n    >\r\n      <TextField\r\n        id=\"outlined-basic\"\r\n        label=\"Search Employees...\"\r\n        variant=\"outlined\"\r\n        onChange={(e) => setSearchValue(() => e.target.value)}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { renderRows, renderFiltered } from \"../utils/utils\";\r\nimport moment from \"moment\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport SearchBox from \"./SearchBox\";\r\n\r\nfunction EmployeeDirectory() {\r\n  const [searchValue, setSearchValue] = useState(null);\r\n  const [filteredData, setFilteredData] = useState(null);\r\n  const employeeData = useSelector(\r\n    (state) => state.employees.employees.employees?.results\r\n  );\r\n\r\n  const columns = [\r\n    {\r\n      field: \"id\",\r\n      headerName: \"ID\",\r\n      headerAlign: \"center\",\r\n      align: \"center\",\r\n      flex: 1,\r\n      width: 4,\r\n    },\r\n    {\r\n      field: \"image\",\r\n      headerName: \"Image\",\r\n      headerAlign: \"center\",\r\n      align: \"center\",\r\n      flex: 2,\r\n      renderCell: (params) => (\r\n        <img style={{ borderRadius: \"5px\" }} src={params.value} alt=\"\" />\r\n      ),\r\n    },\r\n    {\r\n      field: \"firstName\",\r\n      headerName: \"First Name\",\r\n      headerAlign: \"center\",\r\n      align: \"center\",\r\n      flex: 4,\r\n    },\r\n    {\r\n      field: \"lastName\",\r\n      headerName: \"Last Name\",\r\n      headerAlign: \"center\",\r\n      align: \"center\",\r\n      flex: 4,\r\n    },\r\n    {\r\n      field: \"phone\",\r\n      headerName: \"Phone\",\r\n      headerAlign: \"center\",\r\n      align: \"center\",\r\n      flex: 4,\r\n    },\r\n    {\r\n      field: \"email\",\r\n      headerName: \"Email\",\r\n      headerAlign: \"center\",\r\n      align: \"center\",\r\n      flex: 4,\r\n    },\r\n    {\r\n      field: \"dob\",\r\n      headerName: \"Date of Birth\",\r\n      headerAlign: \"center\",\r\n      align: \"center\",\r\n      flex: 4,\r\n    },\r\n    {\r\n      field: \"nationality\",\r\n      headerName: \"Nationality\",\r\n      headerAlign: \"center\",\r\n      align: \"center\",\r\n      flex: 2,\r\n    },\r\n  ];\r\n\r\n  let employeesArray = [];\r\n  renderRows(employeeData, employeesArray);\r\n\r\n  React.useEffect(() => {\r\n    renderFiltered(searchValue, employeesArray, employeeData, setFilteredData);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [searchValue, employeeData]);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ height: 800, width: \"100%\" }}>\r\n        <SearchBox setSearchValue={setSearchValue} />\r\n        <DataGrid\r\n          rowHeight={80}\r\n          rows={filteredData?.length > 0 ? filteredData : employeesArray}\r\n          columns={columns}\r\n          pageSize={10}\r\n          rowsPerPageOptions={[5]}\r\n          // checkboxSelection\r\n          sx={{\r\n            boxShadow: 2,\r\n            m: 4,\r\n            mt: 2,\r\n            p: 2,\r\n            border: 2,\r\n            borderColor: \"primary.light\",\r\n            \"& .MuiDataGrid-cell:hover\": {\r\n              color: \"primary.main\",\r\n            },\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmployeeDirectory;\r\n","import moment from 'moment'\r\n\r\nexport const renderRows = (employeeData, employeesArray) => {\r\n    employeeData?.map((employee, index) => {\r\n        const birthDate = moment(employee.dob.date).format('MMMM Do, YYYY');\r\n        employeesArray.push({\r\n            id: index,\r\n            image: employee.picture.medium,\r\n            firstName: employee.name.first,\r\n            lastName: employee.name.last,\r\n            name: `${employee.name.first} ${employee.name.last}`,\r\n            phone: employee.phone,\r\n            email: employee.email,\r\n            dob: birthDate,\r\n            nationality: employee.nat\r\n        })\r\n    })\r\n}\r\n\r\nexport const renderFiltered = (searchValue, rows, employeeData, setFilteredData) => {\r\n    let newArray = []\r\n    if (searchValue === null || searchValue === '') {\r\n        newArray = rows\r\n    } else {\r\n        const filteredEmployees = employeeData.filter((employee) => {\r\n            const employeeSearch = searchValue?.toLowerCase()\r\n            if (\r\n                employee.name.first.toLowerCase().includes(employeeSearch) ||\r\n                employee.name.last.toLowerCase().includes(employeeSearch) ||\r\n                employee.email.toLowerCase().includes(employeeSearch) ||\r\n                employee.phone.toLowerCase().includes(employeeSearch) ||\r\n                employee.dob.date.toLowerCase().includes(employeeSearch) ||\r\n                employee.nat.toLowerCase().includes(employeeSearch)\r\n            ) { return true }\r\n            return false\r\n        })\r\n        filteredEmployees.map((employee, index) => {\r\n            const birthDate = moment(employee.dob.date).format('MMMM Do, YYYY');\r\n            newArray.push({\r\n                id: index,\r\n                image: employee.picture.medium,\r\n                firstName: employee.name.first,\r\n                lastName: employee.name.last,\r\n                name: `${employee.name.first} ${employee.name.last}`,\r\n                phone: employee.phone,\r\n                email: employee.email,\r\n                dob: birthDate,\r\n                nationality: employee.nat\r\n            })\r\n        })\r\n    }\r\n    setFilteredData(() => newArray)\r\n}","import React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron-fluid text-light jumboTronContainer\">\r\n            <Box\r\n                sx={{\r\n                    ml: 4,\r\n                }}\r\n            >\r\n                <h1 className=\"display-4 text-left\">Employee Directory</h1>\r\n                <p className=\"lead text-left\">Search your Employees!</p>\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport EmployeeDirectory from \"./components/EmployeeDirectory\";\r\nimport Jumbotron from \"./components/Jumbotron\";\r\nimport { fetchEmployeeData } from './store/employee-actions';\r\n\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchEmployeeData());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Jumbotron />\r\n        <Routes>\r\n          <Route path=\"/employee-directory\" element={<EmployeeDirectory />}></Route>\r\n          <Route path=\"*\" element={<Navigate to=\"/employee-directory\" replace={true} />}>\r\n          </Route>\r\n        </Routes>\r\n      </Router>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n","// Import the reducers from each respective state slice. \nimport { uiActions } from './ui-slice';\nimport { employeeActions } from './employee-slice';\n\n// Action Creator Thunk (A function that can return another function as well as execute asynchronous functions). This action creator is used to fetch the cart data from the Firebase database.\nexport const fetchEmployeeData = () => {\n  return async (dispatch) => {\n    // fetch the data from the database (with fetch, the default method is \"GET\")\n    const fetchData = async () => {\n\n      const BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n      dispatch(uiActions.setLoadingTrue());\n      // Set the response variable in an async function\n      const response = await fetch(BASEURL);\n\n      // If the response is not okay, throw an error\n      if (!response.ok) {\n        throw new Error('Could not fetch product data!');\n      }\n\n      // Set the response in the \"data\" constant and return the response after parsing the body text to JSON\n      const data = await response.json()\n\n      dispatch(uiActions.setLoadingFalse());\n\n      // Ultimately, the fetchData function will return this 'data' variable\n      return data;\n    };\n\n\n    // In a try/catch statement, call that fetchData function\n    try {\n      // Call the function and await the response\n      const employeeData = await fetchData();\n\n      // Dispatch the action created in and imported from the cart-slice.js file. Again, the 'type' property is not needed with react toolkit.\n      dispatch(\n        employeeActions.populateEmployeesArray({\n          //replace the cart with the updated items. If there is no items, make it an empty array.\n          employees: employeeData || [],\n        })\n      );\n      // This catches any new errors thorn from the fetchData function above.\n    } catch (error) {\n\n      // Set the notification component to 'error' status\n      dispatch(\n        uiActions.showNotification({\n          status: 'error',\n          title: 'Error!',\n          message: 'Fetching employee data failed!',\n        })\n      );\n    }\n  };\n};\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport store from './store/index';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}